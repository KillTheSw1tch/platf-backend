import json
from django.shortcuts import render, redirect
from django.contrib.auth.models import User
from django.core.mail import send_mail
from django.conf import settings
from rest_framework import generics, viewsets, status
from .serializers import ExtendedUserSerializer, UserSerializer, TeamMemberDetailSerializer
from rest_framework.permissions import AllowAny, IsAuthenticated
from .models import Cargo, EmailVerification, Truck, BookingRequest, TeamCompany, TeamMember
from .serializers import CargoSerializer, UserSerializer, TruckSerializer, ProfileSerializer, BookingRequestSerializer, TeamCompanySerializer, TeamMemberSerializer
from .forms import CargoForm
import random
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.decorators import permission_classes
import requests
from django.utils.translation import gettext as _
import logging

from rest_framework import generics
from rest_framework.exceptions import PermissionDenied

from django.db import models

from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync

from .models import Notification

from .serializers import NotificationSerializer

from rest_framework.generics import ListAPIView

from .utils import get_user_company_and_role

from api.models import Profile, TeamMember, RegisteredCompany

import pyotp
import qrcode
import io
import base64

from rest_framework import viewsets, permissions

from .serializers import ReviewSerializer

from .models import Review

import os
from django.views.generic import View
from django.http import FileResponse

class FrontendAppView(View):
    def get(self, request):
        file_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), '../frontend/dist/index.html')
        return FileResponse(open(file_path, 'rb'))


logger = logging.getLogger(__name__)

class CreateUserView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = ExtendedUserSerializer
    permission_classes = [AllowAny]

    def perform_create(self, serializer):
        try:
            user = serializer.save()
            code = str(random.randint(100000, 999999))
            print("[DEBUG] Received request:")
            print(json.dumps(self.request.data, indent=4, ensure_ascii=False))
            EmailVerification.objects.create(user=user, code=code)
            self.send_verification_email(user, code)
        except Exception as e:
            print(f"[ERROR] Error creating a user: {e}")

    def send_verification_email(self, user, code):
        subject = _('–ö–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó')
        message = _('–ü—Ä–∏–≤—ñ—Ç, {username}! –í–∞—à –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {code}').format(username=user.username, code=code)
        from_email = settings.DEFAULT_FROM_EMAIL
        recipient_list = [user.email]

        try:
            send_mail(subject, message, from_email, recipient_list, fail_silently=False)
            print("[DEBUG] Email was sent successfully.")
        except Exception as e:
            print(f"[ERROR] Error sending an email: {e}")

from django.db.models import Q

class CargoViewSet(viewsets.ModelViewSet):
    queryset = Cargo.objects.all()  # üëà –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û
    serializer_class = CargoSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return Cargo.objects.filter(user=self.request.user)  # üëà –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

    def get_serializer_context(self):
        return {'request': self.request}

    def perform_create(self, serializer):
        serializer.save(
            user=self.request.user,
            show_on_main=False,
            show_in_available_cargo=False  # ‚ùóÔ∏è–û—Ç–∫–ª—é—á–∞–µ–º
        )





def add_cargo_view(request):
    if request.method == 'POST':
        form = CargoForm(request.POST)
        if form.is_valid():
            cargo = form.save(commit=False)  # –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É
            cargo.user = request.user        # –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cargo.save()                     # –¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            return redirect('cargo-success')
    else:
        form = CargoForm()

    return render(request, 'api/add_cargo.html', {'form': form})


class UserProfileAPIView(generics.RetrieveUpdateAPIView):
    serializer_class = ExtendedUserSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        return self.request.user

    def update(self, request, *args, **kwargs):
        user = self.get_object()
        profile_data = request.data.pop('profile', {})

        serializer = self.get_serializer(user, data=request.data, partial=True)
        serializer.is_valid(raise_exception=True)
        serializer.save()

        profile_serializer = ProfileSerializer(user.profile, data=profile_data, partial=True)
        profile_serializer.is_valid(raise_exception=True)
        profile_serializer.save()

        return Response(serializer.data, status=status.HTTP_200_OK)

class VerifyEmailCodeView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        email = request.data.get('email')
        code = request.data.get('code')

        if not email or not code:
            return Response({'error': _('Email –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã')}, status=400)

        try:
            user = User.objects.get(email=email)
            verification = EmailVerification.objects.get(user=user)

            if verification.code == code:
                user.is_active = True
                user.save()
                verification.delete()
                refresh = RefreshToken.for_user(user)
                return Response({
                    'message': _('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!'),
                    'token': str(refresh.access_token),
                }, status=200)
            else:
                return Response({'error': _('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥')}, status=400)

        except User.DoesNotExist:
            return Response({'error': _('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')}, status=404)
        except EmailVerification.DoesNotExist:
            return Response({'error': _('–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')}, status=404)

class TruckViewSet(viewsets.ModelViewSet):
    serializer_class = TruckSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        return Truck.objects.filter(user=self.request.user)

    def get_serializer_context(self):
        return {'request': self.request}

    def perform_create(self, serializer):
        serializer.save(
            user=self.request.user,
            show_on_main=False,
            show_in_available_vehicles=False
        )




class TruckListCreateView(generics.ListCreateAPIView):
    serializer_class = TruckSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # ‚úÖ –¢–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
        return Truck.objects.filter(user=self.request.user)


from rest_framework.decorators import api_view
from .models import RegisteredCompany, SuspiciousAttempt

def normalize_code(code):
    print(f"[DEBUG] Raw input code: '{code}'")
    normalized = ''.join(filter(str.isalnum, code)).upper()
    print(f"[DEBUG] Normalized code: '{normalized}'")
    return normalized

@api_view(['POST'])
@permission_classes([AllowAny])
def validate_company_code(request):
    country = request.data.get('country')
    code = request.data.get('code')
    ip_address = request.META.get('REMOTE_ADDR')

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞:", country, code)

    normalized_code = normalize_code(code)

    if RegisteredCompany.objects.filter(code__iexact=normalized_code).exists():
        SuspiciousAttempt.objects.create(
            country=country,
            code=normalized_code,
            ip_address=ip_address
        )
        return Response({
            "valid": False,
            "message": _("üö´ –ö–æ–º–ø–∞–Ω—ñ—è –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞. –Ø–∫—â–æ –≤–∏ –≤–≤–∞–∂–∞—î—Ç–µ —Ü–µ –ø–æ–º–∏–ª–∫–æ—é ‚Äî –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.")
        })

    if country == "switzerland" and normalized_code.startswith("CHE") and len(normalized_code) == 12:
        return Response({"valid": True})

    if country == "ukraine" and normalized_code.isdigit() and len(normalized_code) == 8:
        return Response({"valid": True})

    return Response({"valid": False, "message": _("‚ùå –ö–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ–¥—ñ–π—Å–Ω–∏–π.")})

from rest_framework.parsers import MultiPartParser, FormParser
from .models import CompanyDocument
from .serializers import CompanyDocumentSerializer

class CompanyDocumentUploadView(APIView):
    permission_classes = [IsAuthenticated]
    parser_classes = [MultiPartParser, FormParser]

    def post(self, request, *args, **kwargs):
        files = request.FILES.getlist('files')
        documents = []

        for file in files:
            doc = CompanyDocument.objects.create(user=request.user, file=file)
            documents.append(doc)

        serializer = CompanyDocumentSerializer(documents, many=True)
        return Response(serializer.data, status=201)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def check_documents_approval(request):
    user = request.user
    documents = CompanyDocument.objects.filter(user=user)

    approved = documents.filter(is_approved=True).exists()
    rejected = documents.filter(is_rejected=True).exists()

    profile = getattr(user, "profile", None)
    company_data = {}
    is_owner = False
    is_member = False

    registered_company = None
    team_member = TeamMember.objects.select_related('company__registered_company', 'user').filter(user=user).first()

    if team_member:
        team_company = team_member.company
        registered_company = team_company.registered_company
        is_member = True

        print("[DEBUG] is_member:", is_member)
        print("[DEBUG] profile:", profile)
        print("[DEBUG] registered_company:", registered_company)

        if profile and registered_company:
            company_data = {
                "name": team_company.name,
                "address": profile.address or "",
                "email": user.email,
                "phone": profile.phone or "",
                "fullName": user.username,
                "country": registered_company.country,
                "code": registered_company.code,
                "registrationDate": registered_company.created_at.strftime('%Y-%m-%d'),
                "isVerified": approved,
                "totalOrders": 0,
                "activeOrders": 0,
                "totalCargo": 0,
                "totalVehicles": 0,
                "interest": _("–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
                "activity": _("–ó–∞–º–æ–≤–Ω–∏–∫ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è")
            }


    # 2. –ï—Å–ª–∏ –Ω–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ‚Äî –º–æ–∂–µ—Ç, –≤–ª–∞–¥–µ–ª–µ—Ü
    if not is_member:
        registered_company = RegisteredCompany.objects.filter(registered_by=user).first()
        is_owner = True if registered_company else False

        if profile and registered_company:
            company_data = {
                "name": profile.company or "",
                "address": profile.address or "",
                "email": user.email,
                "phone": profile.phone or "",
                "fullName": user.username,
                "country": registered_company.country,
                "code": registered_company.code,
                "registrationDate": registered_company.created_at.strftime('%Y-%m-%d'),
                "isVerified": approved,
                "totalOrders": 0,
                "activeOrders": 0,
                "totalCargo": 0,
                "totalVehicles": 0,
                "interest": _("–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
                "activity": _("–ó–∞–º–æ–≤–Ω–∏–∫ –ø–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è")
            }

    print("[DEBUG] company_data:", company_data)

    role = None
    if is_owner:
        role = "owner"
    elif is_member and team_member:
        role = team_member.role

    return Response({
        "approved": approved,
        "rejected": rejected,
        "is_owner": is_owner,
        "is_member": is_member,
        "role": role, 
        "company_data": company_data if company_data else None,
    })



@api_view(['POST'])
@permission_classes([IsAuthenticated])
def register_company(request):
    user = request.user
    country = request.data.get('country')
    code = request.data.get('code')

    if not country or not code:
        return Response({"error": _("Missing country or code")}, status=400)

    normalized_code = normalize_code(code)

    if RegisteredCompany.objects.filter(code__iexact=normalized_code).exists():
        return Response({"error": _("Company already registered")}, status=409)

    # 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–∞–Ω–∏—é
    registered_company = RegisteredCompany.objects.create(
        country=country,
        code=normalized_code,
        registered_by=user
    )

    # 2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º TeamCompany
    TeamCompany.objects.create(
        name=request.user.profile.company or "Unnamed company",
        created_by=user,
        registered_company=registered_company
    )

    return Response({"message": _("Company registered successfully")})


from api.models import Profile
from rest_framework import serializers

# backend/api/views.py

from api.models import Profile, RegisteredCompany, Cargo, Truck

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import AllowAny
from api.models import Profile, RegisteredCompany, Cargo, Truck
from django.utils.translation import gettext as _

class CompanyProfileByNameView(APIView):
    permission_classes = [AllowAny]

    def get(self, request, name):
        profile = Profile.objects.select_related('user').filter(company__iexact=name).first()
        
        if not profile:
            return Response({"error": "–ö–æ–º–ø–∞–Ω—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"}, status=404)

        user = profile.user
        registered_company = RegisteredCompany.objects.filter(registered_by=user).first()
        total_cargo = Cargo.objects.filter(user=user).count()
        total_vehicles = Truck.objects.filter(user=user).count()

        data = {
            "company_name": profile.company or '',
            "address": profile.address or '',
            "registration_date": registered_company.created_at.strftime('%Y-%m-%d') if registered_company and registered_company.created_at else '',
            "is_verified": registered_company is not None,
            "email": user.email or '',
            "phone": profile.phone or '',
            "full_name": profile.full_name or user.username or '',
            "total_orders": 0,
            "active_orders": 0,
            "total_cargo": total_cargo,
            "total_vehicles": total_vehicles,
            "interest": _("–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
            "activity": profile.client_type or '',
            "country": registered_company.country if registered_company else '',
            "company_photo_url": request.build_absolute_uri(profile.company_photo.url) if profile.company_photo else None,
            "city": profile.city or '',
            "canton": profile.canton or '',
            "viber_whatsapp": profile.viber_whatsapp_number or '',
        }

        return Response(data, status=200)



# –ì—Ä—É–∑—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
class MainPageCargoView(generics.ListAPIView):
    serializer_class = CargoSerializer
    permission_classes = [AllowAny]

    def get_queryset(self):
        finished_cargo_ids = BookingRequest.objects.filter(
            status__in=["Finished", "Cancelled", "Rejected"]
        ).values_list('cargo_id', flat=True)

        return Cargo.objects.filter(
            show_on_main=True
        ).exclude(id__in=finished_cargo_ids)


# –ì—Ä—É–∑—ã –¥–ª—è "Available Cargo"
class AvailableCargoView(generics.ListAPIView):
    serializer_class = CargoSerializer
    permission_classes = [AllowAny]

    def get_queryset(self):
        # –í—Å–µ –∑–∞–Ω—è—Ç—ã–µ –≥—Ä—É–∑—ã
        finished_cargo_ids = BookingRequest.objects.filter(
            status__in=["Finished", "Cancelled", "Accepted"],
            cargo__isnull=False
        ).values_list('cargo_id', flat=True)

        return Cargo.objects.filter(
            show_in_available_cargo=True
        ).exclude(id__in=finished_cargo_ids)




# –ú–∞—à–∏–Ω—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
class MainPageTruckView(generics.ListAPIView):
    serializer_class = TruckSerializer
    permission_classes = [AllowAny]

    def get_queryset(self):
        finished_truck_ids = BookingRequest.objects.filter(
            status__in=["Finished", "Cancelled", "Rejected"]
        ).values_list('truck_id', flat=True)

        return Truck.objects.filter(
            show_on_main=True
        ).exclude(id__in=finished_truck_ids)

# –ú–∞—à–∏–Ω—ã –¥–ª—è "Available Vehicles"
class AvailableTruckView(generics.ListAPIView):
    serializer_class = TruckSerializer
    permission_classes = [AllowAny]

    def get_queryset(self):
        # –í—Å–µ –∑–∞–Ω—è—Ç—ã–µ –º–∞—à–∏–Ω—ã
        finished_truck_ids = BookingRequest.objects.filter(
            status__in=["Finished", "Cancelled", "Accepted"],
            truck__isnull=False
        ).values_list('truck_id', flat=True)

        return Truck.objects.filter(
            show_in_available_vehicles=True
        ).exclude(id__in=finished_truck_ids)



from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework import status
from rest_framework.response import Response

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def sent_requests_view(request):
    user = request.user
    user_id = request.query_params.get("user_id")

    # –ï—Å–ª–∏ user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî –≤–µ—Ä–Ω—ë–º –∑–∞—è–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —é–∑–µ—Ä–∞
    if not user_id:
        qs = BookingRequest.objects.filter(sender=user)
        serializer = BookingRequestSerializer(qs, many=True, context={'request': request})
        return Response(serializer.data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä
    from .utils import get_user_company_and_role
    company, role = get_user_company_and_role(user)

    if role not in ['owner', 'manager']:
        return Response({"error": "Access denied"}, status=403)

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π user_id ‚Äî —ç—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    try:
        TeamMember.objects.get(company=company, user_id=user_id)
    except TeamMember.DoesNotExist:
        return Response({"error": "User not in your team"}, status=403)

    # –í—Å—ë –æ–∫ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—è–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    qs = BookingRequest.objects.filter(sender_id=user_id)
    serializer = BookingRequestSerializer(qs, many=True, context={'request': request})
    return Response(serializer.data)



@api_view(['GET'])
@permission_classes([IsAuthenticated])
def received_requests_view(request):
    user = request.user
    user_id = request.query_params.get("user_id")

    if not user_id:
        qs = BookingRequest.objects.filter(receiver=user, status="Waiting")
        serializer = BookingRequestSerializer(qs, many=True, context={'request': request})
        return Response(serializer.data)

    company, role = get_user_company_and_role(user)
    if role not in ['owner', 'manager']:
        return Response({"error": "Access denied"}, status=403)

    try:
        TeamMember.objects.get(company=company, user_id=user_id)
    except TeamMember.DoesNotExist:
        return Response({"error": "User not in your team"}, status=403)

    qs = BookingRequest.objects.filter(receiver_id=user_id, status="Waiting")
    serializer = BookingRequestSerializer(qs, many=True, context={'request': request})
    return Response(serializer.data)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def active_requests_view(request):
    user = request.user
    user_id = request.query_params.get("user_id")

    if not user_id:
        qs = BookingRequest.objects.filter(
            status="Accepted"
        ).filter(models.Q(sender=user) | models.Q(receiver=user))
        serializer = BookingRequestSerializer(qs, many=True, context={'request': request})
        return Response(serializer.data)

    company, role = get_user_company_and_role(user)
    if role not in ['owner', 'manager']:
        return Response({"error": "Access denied"}, status=403)

    try:
        TeamMember.objects.get(company=company, user_id=user_id)
    except TeamMember.DoesNotExist:
        return Response({"error": "User not in your team"}, status=403)

    qs = BookingRequest.objects.filter(
        status="Accepted"
    ).filter(models.Q(sender_id=user_id) | models.Q(receiver_id=user_id))

    serializer = BookingRequestSerializer(qs, many=True, context={'request': request})
    return Response(serializer.data)




@api_view(['GET'])
@permission_classes([IsAuthenticated])
def archived_requests_view(request):
    user = request.user
    user_id = request.query_params.get("user_id")

    if not user_id:
        qs = BookingRequest.objects.filter(
            status="Finished"
        ).filter(
            (models.Q(sender=user) & models.Q(sender_deleted=False)) |
            (models.Q(receiver=user) & models.Q(receiver_deleted=False))
        )
        serializer = BookingRequestSerializer(qs, many=True, context={'request': request})
        return Response(serializer.data)

    company, role = get_user_company_and_role(user)
    if role not in ['owner', 'manager']:
        return Response({"error": "Access denied"}, status=403)

    try:
        TeamMember.objects.get(company=company, user_id=user_id)
    except TeamMember.DoesNotExist:
        return Response({"error": "User not in your team"}, status=403)

    qs = BookingRequest.objects.filter(
        status="Finished"
    ).filter(
        (models.Q(sender_id=user_id) & models.Q(sender_deleted=False)) |
        (models.Q(receiver_id=user_id) & models.Q(receiver_deleted=False))
    )

    serializer = BookingRequestSerializer(qs, many=True, context={'request': request})
    return Response(serializer.data)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def soft_delete_booking_for_user(request, booking_id):
    user = request.user
    try:
        booking = BookingRequest.objects.get(id=booking_id)
    except BookingRequest.DoesNotExist:
        return Response({'error': '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}, status=404)

    if booking.sender == user:
        booking.sender_deleted = True
    elif booking.receiver == user:
        booking.receiver_deleted = True
    else:
        return Response({'error': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞'}, status=403)

    booking.save()
    return Response({'message': '–ó–∞—è–≤–∫–∞ —Å–∫—Ä—ã—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}, status=200)


@api_view(['GET', 'POST', 'DELETE'])
@permission_classes([IsAuthenticated])
def company_photo_view(request):
    profile = request.user.profile

    if request.method == 'GET':
        if profile.company_photo:
            return Response({"photo_url": request.build_absolute_uri(profile.company_photo.url)})
        return Response({"photo_url": "/static/images/no-photo-placeholder.png"})

    elif request.method == 'POST':
        photo = request.FILES.get('company_photo')
        if not photo:
            return Response({"error": "No photo provided"}, status=400)

        profile.company_photo = photo
        profile.save()
        return Response({"photo_url": request.build_absolute_uri(profile.company_photo.url)}, status=201)

    elif request.method == 'DELETE':
        if profile.company_photo:
            profile.company_photo.delete(save=False)  # —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Ñ–∏–∑–∏—á–µ—Å–∫–∏
            profile.company_photo = None              # –æ—á–∏—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ
            profile.save()
            return Response({"message": "Photo deleted successfully."}, status=204)
        return Response({"error": "No photo to delete."}, status=404)


class BookingRequestListCreateView(generics.ListCreateAPIView):
    queryset = BookingRequest.objects.all()
    serializer_class = BookingRequestSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        return BookingRequest.objects.filter(sender=self.request.user)

    def perform_create(self, serializer):
        sender = self.request.user
        data = self.request.data

        cargo_id = data.get("cargo")
        truck_id = data.get("truck")

        receiver = None

        if cargo_id:
            try:
                cargo = Cargo.objects.get(id=cargo_id)
                receiver = cargo.user
            except Cargo.DoesNotExist:
                raise serializers.ValidationError("–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        elif truck_id:
            try:
                truck = Truck.objects.get(id=truck_id)
                receiver = truck.user
            except Truck.DoesNotExist:
                raise serializers.ValidationError("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            raise serializers.ValidationError("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å cargo –∏–ª–∏ truck")

        serializer.save(sender=sender, receiver=receiver)
        # üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        if receiver:
            send_notification_to_user(receiver.id, f"–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç {sender.username}")

class BookingRequestDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = BookingRequest.objects.all()
    serializer_class = BookingRequestSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        obj = super().get_object()
        if obj.receiver != self.request.user and obj.sender != self.request.user:
            raise PermissionDenied("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É.")
        return obj

    def patch(self, request, *args, **kwargs):
        instance = self.get_object()
        new_status = request.data.get("status")

        print(f"üîÑ PATCH booking ID {instance.id} ‚Äî {instance.status} ‚Üí {new_status}")
        print(f"üë§ –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {request.user.username} (ID: {request.user.id})")

        if new_status not in ["Accepted", "Rejected", "Finished", "Cancelled"]:
            return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å."}, status=400)

        instance.status = new_status
        instance.save()

        # üîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–µ–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º
        if new_status == "Accepted":
            send_notification_to_user(instance.sender.id, f"–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø—Ä–∏–Ω—è—Ç {instance.receiver.username}")
            send_notification_to_user(instance.receiver.id, f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç {instance.sender.username}")

        elif new_status == "Rejected":
            send_notification_to_user(instance.sender.id, f"–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω {instance.receiver.username}")

        elif new_status == "Finished":
            send_notification_to_user(instance.sender.id, f"–í–∞—à –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω {instance.receiver.username}")
            send_notification_to_user(instance.receiver.id, f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑ —Å {instance.sender.username}")

        serializer = self.get_serializer(instance)
        return Response(serializer.data)

    def perform_destroy(self, instance):
        user = self.request.user

        if instance.sender == user:
            instance.sender_deleted = True
        elif instance.receiver == user:
            instance.receiver_deleted = True
        else:
            raise PermissionDenied("–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ.")

        if instance.sender_deleted and instance.receiver_deleted:
            # –ï—Å–ª–∏ –æ–±–∞ —É–¥–∞–ª–∏–ª–∏ ‚Äî —Ç–æ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
            print(f"üóëÔ∏è –û–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–∏–ª–∏ ‚Üí —É–¥–∞–ª—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é: {instance.id}")
            if instance.cargo:
                instance.cargo.delete()
            if instance.truck:
                instance.truck.delete()
            instance.delete()
        else:
            print(f"‚ùï –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —É–¥–∞–ª–∏–ª ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É (ID: {instance.id})")
            instance.save()


def send_notification_to_user(user_id, message):
    try:
        profile = Profile.objects.get(user_id=user_id)
        if not profile.notifications_enabled:
            print(f"[INFO] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è user_id={user_id}")
            return  # ‚õî –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    except Profile.DoesNotExist:
        print(f"[WARNING] –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è user_id={user_id}")
        return

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    Notification.objects.create(
        receiver_id=user_id,
        message=message
    )

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ WebSocket
    channel_layer = get_channel_layer()
    async_to_sync(channel_layer.group_send)(
        f"user_{user_id}",
        {
            "type": "send_notification",
            "message": message
        }
    )


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_user_notifications(request):
    notifications = Notification.objects.filter(receiver=request.user).order_by('-created_at')
    serializer = NotificationSerializer(notifications, many=True)
    return Response(serializer.data)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def mark_notification_as_read(request, notification_id):
    try:
        notification = Notification.objects.get(id=notification_id, receiver=request.user)
        notification.is_read = True
        notification.save()
        return Response({'status': 'marked as read'})
    except Notification.DoesNotExist:
        return Response({'error': 'Not found'}, status=404)

class CreateTeamCompanyView(generics.CreateAPIView):
    serializer_class = TeamCompanySerializer
    permission_classes = [IsAuthenticated]

    def perform_create(self, serializer):
        registered_company = RegisteredCompany.objects.filter(registered_by=self.request.user).first()

        if not registered_company:
            raise PermissionDenied("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é.")

        if TeamCompany.objects.filter(registered_company=registered_company).exists():
            raise PermissionDenied("–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.")

        serializer.save(
            created_by=self.request.user,
            registered_company=registered_company
        )




class TeamMemberCreateView(generics.CreateAPIView):
    serializer_class = TeamMemberSerializer
    permission_classes = [IsAuthenticated]

    def get_serializer_context(self):
        context = super().get_serializer_context()
        company, _ = get_user_company_and_role(self.request.user)
        context['company'] = company  # üëà –≤–æ—Ç —ç—Ç–æ –Ω—É–∂–Ω–æ
        return context

    def perform_create(self, serializer):
        company, role = get_user_company_and_role(self.request.user)

        if role not in ['owner', 'manager']:
            raise PermissionDenied("–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")


        print("[DEBUG] –ü—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ:", self.request.data)
        print("[DEBUG] –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–æ–º–ø–∞–Ω–∏–∏:", company)

        new_member = serializer.save()

        # üëá –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if hasattr(new_member.user, 'profile'):
            new_member.user.profile.company = company.name
            new_member.user.profile.save()







# def perform_create(self, serializer):
#     print("[DEBUG] –î–∞–Ω–Ω—ã–µ –æ—Ç —Ñ—Ä–æ–Ω—Ç–∞:", self.request.data)  # üëà –ø–µ—á–∞—Ç–∞–µ–º –≤—Å—ë, —á—Ç–æ –ø—Ä–∏—à–ª–æ

class TeamMemberListView(ListAPIView):
    serializer_class = TeamMemberDetailSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        company, role = get_user_company_and_role(self.request.user)

        if role not in ['owner', 'manager']:
            return TeamMember.objects.none()

        return TeamMember.objects.filter(company=company)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_company_info(request):
    user = request.user
    profile = getattr(user, 'profile', None)

    # 1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ (TeamMember)
    team_member = TeamMember.objects.select_related('company__registered_company').filter(user=user).first()
    if team_member:
        company = team_member.company
        registered = company.registered_company
        return Response({
            'name': company.name,
            'zip_code': profile.zip_code if profile else '',
            'city': profile.city if profile else '',
            'address': profile.address if profile else '',
            'canton': profile.canton if profile else ''
        })

    # 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –∫–æ–º–ø–∞–Ω–∏—é)
    registered = RegisteredCompany.objects.filter(registered_by=user).first()
    if registered and profile:
        return Response({
            'name': profile.company or '',
            'zip_code': profile.zip_code or '',
            'city': profile.city or '',
            'address': profile.address or '',
            'canton': profile.canton or ''
        })

    return Response({'error': 'Company not found'}, status=404)

class SearchCargoView(generics.ListAPIView):
    serializer_class = CargoSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        finished_cargo_ids = BookingRequest.objects.filter(
            status__in=["Finished", "Cancelled"],
            cargo__isnull=False
        ).values_list('cargo_id', flat=True)

        sort_param = self.request.query_params.get('sort', 'createdAt_desc')

        sort_map = {
            'createdAt_desc': '-created_at',
            'createdAt_asc': 'created_at',
            'price_asc': 'price',
            'price_desc': '-price',
            'pickupDate_asc': 'pickup_date',
            'pickupDate_desc': '-pickup_date',
            'weight_asc': 'weight',
            'weight_desc': '-weight'
        }

        ordering = sort_map.get(sort_param, '-created_at')

        return Cargo.objects.exclude(id__in=finished_cargo_ids).order_by(ordering)



class SearchTruckView(generics.ListAPIView):
    serializer_class = TruckSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        finished_truck_ids = BookingRequest.objects.filter(
            status__in=["Finished", "Cancelled"],
            truck__isnull=False
        ).values_list('truck_id', flat=True)

        sort_param = self.request.query_params.get('sort', 'createdAt_desc')

        sort_map = {
            'createdAt_desc': '-created_at',
            'createdAt_asc': 'created_at',
            'price_asc': 'price',
            'price_desc': '-price',
            'availableDate_asc': 'loading_date_from',
            'availableDate_desc': '-loading_date_from',
            'capacity_asc': 'carrying_capacity',
            'capacity_desc': '-carrying_capacity'
        }

        ordering = sort_map.get(sort_param, '-created_at')

        return Truck.objects.exclude(id__in=finished_truck_ids).order_by(ordering)


class GetTeamMembersView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        company, role = get_user_company_and_role(request.user)

        if role not in ['owner', 'manager']:
            raise PermissionDenied("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

        members = TeamMember.objects.filter(company=company).select_related('user')

        data = [
            {
                "id": m.user.id,
                "name": m.full_name or m.user.username,
                "role": m.role
            }
            for m in members
        ]

        return Response(data)

class GetUserOrdersView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user_id = request.query_params.get("user_id")
        order_type = request.query_params.get("type")

        if not user_id or not order_type:
            return Response({"error": "Missing parameters"}, status=400)

        company, role = get_user_company_and_role(request.user)
        if role not in ['owner', 'manager']:
            raise PermissionDenied("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–ø–∞–Ω–∏–∏
        try:
            member = TeamMember.objects.get(company=company, user_id=user_id)
        except TeamMember.DoesNotExist:
            return Response([], status=404)

        if order_type == "cargo":
            orders = Cargo.objects.filter(user_id=user_id)
            return Response(CargoSerializer(orders, many=True).data)
        elif order_type == "truck":
            orders = Truck.objects.filter(user_id=user_id)
            return Response(TruckSerializer(orders, many=True).data)

        return Response({"error": "Invalid type"}, status=400)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def find_order_by_number(request):
    number = request.query_params.get("number")

    if not number:
        return Response({"error": "–ù–æ–º–µ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω"}, status=400)

    if number.startswith("C"):
        try:
            cargo = Cargo.objects.get(order_number=number)
            data = CargoSerializer(cargo, context={'request': request}).data
            return Response({"type": "cargo", "data": data})
        except Cargo.DoesNotExist:
            return Response({"error": "–ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)

    elif number.startswith("V"):
        try:
            truck = Truck.objects.get(order_number=number)
            data = TruckSerializer(truck, context={'request': request}).data
            return Response({"type": "truck", "data": data})
        except Truck.DoesNotExist:
            return Response({"error": "–ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status=404)

    else:
        return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞"}, status=400)



@api_view(['GET'])
@permission_classes([IsAuthenticated])
def generate_2fa_qr(request):
    user_profile = request.user.profile

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç (–µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç)
    if not user_profile.two_factor_secret:
        secret = pyotp.random_base32()
        user_profile.two_factor_secret = secret
        user_profile.save()
    else:
        secret = user_profile.two_factor_secret

    # –§–æ—Ä–º–∏—Ä—É–µ–º otpauth URI
    otp_uri = pyotp.totp.TOTP(secret).provisioning_uri(
        name=request.user.email,
        issuer_name="Platforma"
    )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ ‚Üí base64
    qr = qrcode.make(otp_uri)
    buffer = io.BytesIO()
    qr.save(buffer, format="PNG")
    qr_b64 = base64.b64encode(buffer.getvalue()).decode()

    return Response({
        "qr_code_base64": f"data:image/png;base64,{qr_b64}",
        "secret": secret
    })

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def verify_2fa_code(request):
    user_profile = request.user.profile
    code = request.data.get("code")

    if not user_profile.two_factor_secret:
        return Response({"error": "2FA –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"}, status=400)

    if not code:
        return Response({"error": "–ö–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}, status=400)

    totp = pyotp.TOTP(user_profile.two_factor_secret)

    if totp.verify(code, valid_window=1):
        user_profile.is_2fa_enabled = True

        user_profile.save()
        print("‚úÖ 2FA –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")  # ‚Üê —ç—Ç–æ –≤—ã–≤–µ–¥–µ—Ç—Å—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        print("[DEBUG] is_2fa_enabled:", user_profile.is_2fa_enabled)
        return Response({"success": "2FA –≤–∫–ª—é—á–µ–Ω–∞"})
    else:
        return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"}, status=400)


class Generate2FAView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user = request.user

        # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç
        secret = pyotp.random_base32()
        user.profile.two_factor_secret = secret
        user.profile.save()

        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è Google Authenticator
        otp_uri = pyotp.totp.TOTP(secret).provisioning_uri(name=user.email, issuer_name="Platforma")

        # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        qr = qrcode.make(otp_uri)
        buffer = io.BytesIO()
        qr.save(buffer, format="PNG")
        qr_code_base64 = base64.b64encode(buffer.getvalue()).decode()

        return Response({
            "secret": secret,
            "qr_code_base64": f"data:image/png;base64,{qr_code_base64}"
        })

class Verify2FAView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        code = request.data.get("code")
        user = request.user

        if not user.profile.two_factor_secret:
            return Response({"detail": "2FA –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞"}, status=status.HTTP_400_BAD_REQUEST)

        totp = pyotp.TOTP(user.profile.two_factor_secret)
        if totp.verify(code):
            user.profile.is_two_factor_enabled = True
            user.profile.save()
            return Response({"detail": "2FA –≤–∫–ª—é—á–µ–Ω–∞!"})
        else:
            return Response({"detail": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"}, status=status.HTTP_400_BAD_REQUEST)

class Disable2FAView(APIView):
    permission_classes = [IsAuthenticated]

    def delete(self, request):
        user = request.user
        profile = user.profile

        profile.is_2fa_enabled = False  # ‚Üê –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
        profile.two_factor_secret = ''
        profile.save()

        return Response({"detail": "2FA –æ—Ç–∫–ª—é—á–µ–Ω–∞!"}, status=status.HTTP_200_OK)

class Verify2FALoginView(APIView):
    permission_classes = [AllowAny]

    def post(self, request):
        email = request.data.get("email")
        code = request.data.get("code")

        if not email or not code:
            return Response({"error": "Email –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}, status=400)

        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            return Response({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)

        profile = getattr(user, "profile", None)
        if not profile or not profile.two_factor_secret:
            return Response({"error": "2FA –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"}, status=400)

        totp = pyotp.TOTP(profile.two_factor_secret)
        if not totp.verify(code, valid_window=1):
            return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"}, status=400)

        # ‚úÖ –ï—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π ‚Äî –≤—ã–¥–∞—ë–º —Ç–æ–∫–µ–Ω
        refresh = RefreshToken.for_user(user)
        return Response({
            "access": str(refresh.access_token),
            "refresh": str(refresh)
        })

class ChangePasswordView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        user = request.user
        old_password = request.data.get("old_password")
        new_password = request.data.get("new_password")

        if not old_password or not new_password:
            return Response({"error": "–°—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}, status=400)

        if not user.check_password(old_password):
            return Response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å"}, status=400)

        user.set_password(new_password)
        user.save()
        return Response({"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω"})


@api_view(['GET', 'POST'])
@permission_classes([IsAuthenticated])
def notifications_toggle_view(request):
    profile = request.user.profile

    if request.method == 'GET':
        return Response({'notifications_enabled': profile.notifications_enabled})

    if request.method == 'POST':
        new_value = request.data.get('notifications_enabled')
        if new_value is not None:
            profile.notifications_enabled = new_value in ['true', 'True', True, 1, '1']
            profile.save()
            return Response({'notifications_enabled': profile.notifications_enabled})
        else:
            return Response({'error': 'Missing notifications_enabled'}, status=400) 

class ReviewViewSet(viewsets.ModelViewSet):
    queryset = Review.objects.all()
    serializer_class = ReviewSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        user = self.request.user

        queryset = Review.objects.all()
        booking_id = self.request.query_params.get('booking')
        target_id = self.request.query_params.get('target_user')
        author_id = self.request.query_params.get('author')

        if booking_id:
            queryset = queryset.filter(booking_id=booking_id)
        if target_id:
            queryset = queryset.filter(target_user_id=target_id)
        if author_id:
            queryset = queryset.filter(author_id=author_id)

        return queryset

    def perform_create(self, serializer):
        author = self.request.user
        target_user = self.request.data.get('target_user')
        booking = self.request.data.get('booking')

        if Review.objects.filter(author=author, target_user_id=target_user, booking_id=booking).exists():
            raise PermissionDenied("–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.")

        serializer.save()

from .utils import get_user_rating_data  # ‚¨ÖÔ∏è –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ utils

@api_view(['GET'])
@permission_classes([AllowAny])  # –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ–º
def get_user_rating(request, user_id):
    try:
        user = User.objects.get(id=user_id)
    except User.DoesNotExist:
        return Response({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)

    average, total = get_user_rating_data(user)
    return Response({
        "rating": average,
        "reviews": total
    })

from django.http import JsonResponse
from django.contrib.auth import get_user_model

User = get_user_model()

@api_view(['GET'])
def get_user_rating_by_email(request):
    email = request.GET.get('email')
    if not email:
        return JsonResponse({'error': 'Email is required'}, status=400)

    try:
        user = User.objects.get(email=email)
    except User.DoesNotExist:
        return JsonResponse({'error': 'User not found'}, status=404)

    average, count = get_user_rating_data(user)
    return JsonResponse({'rating': average, 'reviews': count}) 


