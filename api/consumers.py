import json
from channels.generic.websocket import AsyncWebsocketConsumer

from django.contrib.auth.models import User
from api.models import Profile

from asgiref.sync import sync_to_async


class NotificationConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.user_id = self.scope['url_route']['kwargs']['user_id']
        self.group_name = f"user_{self.user_id}"

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≥—Ä—É–ø–ø–µ (–ø–æ user_id)
        await self.channel_layer.group_add(self.group_name, self.channel_name)
        await self.accept()

    async def disconnect(self, close_code):
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≥—Ä—É–ø–ø—ã
        await self.channel_layer.group_discard(self.group_name, self.channel_name)

    async def receive(self, text_data):
        # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —á—Ç–æ-—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
        pass

    async def send_notification(self, event):
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
        message = event['message']

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É –ø–æ WebSocket
        await self.send(text_data=json.dumps({
            'message': message
        }))

async def connect(self):
    self.user_id = self.scope['url_route']['kwargs']['user_id']
    self.group_name = f"user_{self.user_id}"

    # üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
    try:
        user = await sync_to_async(User.objects.get)(id=self.user_id)
        profile = await sync_to_async(Profile.objects.get)(user=user)
        if not profile.notifications_enabled:
            await self.close()  # ‚õî –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            return
    except Exception as e:
        print(f"[WebSocket ERROR] {e}")
        await self.close()
        return

    await self.channel_layer.group_add(self.group_name, self.channel_name)
    await self.accept()
